
buildscript {
	ext {
		kotlin_version = '1.2.71'
		kotlinx_coroutines_version = '0.30.2'
		dokka_version = '0.9.17'

		corda_release_group = 'net.corda'
		corda_release_version = '4.1'
		corda_gradle_plugins_version = '4.0.45'
		corda_solutions_version = '2.0'

		hibernate_version = '5.3.6.Final'
		quasar_version = '0.7.10'
		capsule_version = '1.0.3'
		asm_version = '5.0.4'
		junit_version = '4.12'
		slf4j_version = '1.7.25'

		spring_boot_version = '2.1.6.RELEASE'
		springBootVersion = '2.1.6.RELEASE'
		spring_version = '5.1.8.RELEASE'
		scrudbeans_version = '0.7'
		springfox_version = '2.9.2'

		artemis_version = "2.6.2"
		jackson_version = "2.9.5"
		jopt_simple_version = '5.0.2'
		guava_version = '25.1-jre'
		//netty_version = '4.1.22.Final'
		h2 = '1.4.196'
		dependency_management_version ="1.0.6.RELEASE"

		// Customise depdendency versions for spring-boot-dependencies
		ext['hibernate.version'] = hibernate_version
		ext['artemis.version'] = artemis_version
		ext['jackson.version'] = jackson_version

	}

	repositories {
		mavenLocal()
		jcenter()
		mavenCentral()
		maven { url 'https://dl.bintray.com/kotlin/exposed' }
		maven { url 'https://jitpack.io' }
		maven { url 'https://ci-artifactory.corda.r3cev.com/artifactory/corda-releases' }
		//Needed only for Corda SNAPSHOT versions
		maven { url 'https://ci-artifactory.corda.r3cev.com/artifactory/corda-dev/' }
		//Needed only for SNAPSHOT versions
		maven { url "http://oss.sonatype.org/content/repositories/snapshots/" }

	}

	dependencies {
		// spring plugins
		classpath "org.springframework.boot:spring-boot-gradle-plugin:$spring_boot_version"
		classpath "io.spring.gradle:dependency-management-plugin:$dependency_management_version"
		// kotlin plugins
		classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
		classpath "org.jetbrains.kotlin:kotlin-allopen:$kotlin_version"
		classpath "org.jetbrains.kotlin:kotlin-noarg:$kotlin_version"
		classpath "org.jetbrains.dokka:dokka-gradle-plugin:${dokka_version}"
		// corda plugins
		classpath "net.corda.plugins:publish-utils:$corda_gradle_plugins_version"
		classpath "net.corda.plugins:quasar-utils:$corda_gradle_plugins_version"
		classpath "net.corda.plugins:cordformation:$corda_gradle_plugins_version"
		classpath "net.corda.plugins:cordapp:$corda_gradle_plugins_version"
		classpath "net.corda.plugins:api-scanner:$corda_gradle_plugins_version"
		// plugins for asciidoctor
		classpath 'org.asciidoctor:asciidoctor-gradle-plugin:1.5.6'
		// release to Maven Central through Sonatype OSSRH
		// without the need to use Nexus GUI
		classpath "io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.12.0"
		classpath "gradle.plugin.com.dorongold.plugins:task-tree:1.3.1"
	}
}

plugins {
	// TODO The capsule plugin requires the newer DSL plugin block.It would be nice if we could unify all the plugins into one style,
	// but the DSL has some restrictions e.g can't be used on the allprojects section. So we should revisit this if there are improvements in Gradle.
	// Version 1.0.2 of this plugin uses capsule:1.0.1
	id "us.kirchmeier.capsule" version "1.0.2"
	id "com.github.hierynomus.license" version "0.14.0"
}

apply plugin: 'org.jetbrains.dokka'
apply plugin: 'io.codearte.nexus-staging'
nexusStaging {
	packageGroup = 'com.github.manosbatsis.corbeans'
	stagingProfileId = 'com.github.manosbatsis'
}

allprojects {
	repositories {
		mavenLocal()
		jcenter()
		mavenCentral()
		maven { url 'https://dl.bintray.com/kotlin/exposed' }
		maven { url 'https://jitpack.io' }
		maven { url 'https://ci-artifactory.corda.r3cev.com/artifactory/corda-releases' }
		//Needed only for Corda SNAPSHOT versions
		maven { url 'https://ci-artifactory.corda.r3cev.com/artifactory/corda-dev/' }
		//Needed only for SNAPSHOT versions
		maven { url "http://oss.sonatype.org/content/repositories/snapshots/" }
		// Corda BNMS
		maven { url 'https://ci-artifactory.corda.r3cev.com/artifactory/corda-solutions-releases'}
		// Gradle tooling API
		maven { url 'https://repo.gradle.org/gradle/libs-releases' }
	}

	version = "0.26"
	group = 'com.github.manosbatsis.corbeans'
	apply from: "$rootDir/gradle/published.gradle"
	apply plugin: 'project-report'
	apply plugin: "com.dorongold.task-tree"
}

subprojects {
	apply from: "$rootDir/gradle/kotlin.gradle"
	apply plugin: 'kotlin-spring'
	apply plugin: 'io.spring.dependency-management'
	apply plugin: 'idea'
	idea {
		module {
			downloadJavadoc = true
			downloadSources = true
		}
	}
	apply plugin: 'license'
	//apply plugin: 'kotlin-kapt' //optional
	configurations {
		// Adding a configuration that extends existing configuration:
		//(testCompile was added by the java plugin)
		integrationTestCompile.extendsFrom(testCompile)
		all {
			// Exclude old Junit since we use jupiter
			exclude group: 'junit', module: 'junit'
			// Stop deprecation warnings since we use stdlib-jdkX
			exclude group: 'org.jetbrains.kotlin', module: 'kotlin-stdlib-jre8'
			exclude group: 'org.jetbrains.kotlin', module: 'kotlin-stdlib-jre7'
			resolutionStrategy {
				// Force dependencies to use the same version of Guava as Corda.
				force "com.google.guava:guava:$guava_version"
			}
		}

		dependencyManagement {
			imports {
				mavenBom org.springframework.boot.gradle.plugin.SpringBootPlugin.BOM_COORDINATES
			}
		}
		dependencies{
			compile("org.springframework.boot:spring-boot-starter:$spring_boot_version")
			implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version")
			implementation("org.jetbrains.kotlin:kotlin-reflect:$kotlin_version")
			compileOnly("org.springframework.boot:spring-boot-configuration-processor:$spring_boot_version")
			testCompile("org.springframework.boot:spring-boot-starter-test:$spring_boot_version")
			testCompile("org.jetbrains.kotlin:kotlin-test:$kotlin_version")
			testCompile("org.junit.jupiter:junit-jupiter-api")
			testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine")
		}
	}

	task allDeps(type: DependencyReportTask) {}

	license {
		header rootProject.file("${rootProject.rootDir}/etc/license/header-lgpl.txt")
		includes(["**/*.java", "**/*.kt"])
		mapping {
			kt='SLASHSTAR_STYLE'
		}
		strictCheck true
	}
}

configurations {
	dokkapath
	dokkapath.description = "dokka project classpath"
}

dependencies {
	dokkapath fileTree (include: ['*.jar'])
}

task dokka (type: org.jetbrains.dokka.gradle.DokkaTask, overwrite: true) {
	moduleName = "$rootProject.name"
	outputDirectory = "$buildDir/dokka"
	outputFormat = "html"
	processConfigurations = []
	
	sourceDirs = files(subprojects.collect {
		p ->

			def path = new File(p.projectDir, "/src/main/kotlin")

			def relativePath = rootDir.toPath().relativize(path.toPath()).toString()
			linkMapping {
				dir = path
				url = "https://....../blob/master/$relativePath"
				suffix = "#L"
			}

			return path
	})
}
