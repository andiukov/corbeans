
apply plugin: 'java'
sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8
apply plugin: 'kotlin'
apply plugin: 'org.jetbrains.dokka'

sourceSets {
	main.java.srcDirs += 'src/main/kotlin'
}

dokka {
	outputFormat = 'javadoc'
	outputDirectory = javadoc.destinationDir
	//inputs.dir 'src/main/kotlin'
	linkMapping {
		dir = "src/main/kotlin"
		url = "https://github.com/manosbatsis/corbeans/tree/master/${project.name}/src/main/kotlin"
		suffix = "#L"
	}
}

task javadocJar(type: Jar, dependsOn: dokka) {
	classifier = 'javadoc'
	from javadoc.destinationDir
}

task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = 'sources'
	from sourceSets.main.allSource
}

// and hook them up into the artifacts collection together
// with the project jar itself when publishing
artifacts {
	archives javadocJar, sourcesJar
}

compileKotlin {
	kotlinOptions {
		languageVersion = "1.2"
		freeCompilerArgs = ["-Xjsr305=strict"]
		jvmTarget = "1.8"
		javaParameters = true   // Useful for reflection.
	}
}

compileTestKotlin {
	kotlinOptions {
		languageVersion = "1.1"
		freeCompilerArgs = ["-Xjsr305=strict"]
		jvmTarget = "1.8"
		javaParameters = true   // Useful for reflection.
	}
}

tasks.withType(JavaCompile) {
	options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation" << "-Xlint:-options" << "-parameters"
}


test {
	// stop gradle from swallowing stdout and stderr
	testLogging {
		events "passed", "skipped", "failed", "standardOut", "standardError"
	}
	// Run unit tests using junit5
	useJUnitPlatform {
		exclude '**/*IntegrationTest.class'
	}
}

// Run integration tests using junit5
task integrationTest(type: Test) {
	testLogging {
		events "passed", "skipped", "failed", "standardOut", "standardError"
	}
	useJUnitPlatform {
		include '**/*IntegrationTest.class'

	}
}